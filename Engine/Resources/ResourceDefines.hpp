#pragma once

#include "Rendering\RenderingDefines.hpp"
#include "Containers\String.hpp"
#include "Containers\Hashmap.hpp"

static constexpr U32 MAX_MIPMAP_COUNT = 16;

enum ResourceUpdateType
{
	RESOURCE_UPDATE_TYPE_BUFFER,
	RESOURCE_UPDATE_TYPE_TEXTURE,
	RESOURCE_UPDATE_TYPE_PIPELINE,
	RESOURCE_UPDATE_TYPE_SAMPLER,
	RESOURCE_UPDATE_TYPE_DESCRIPTOR_SET_LAYOUT,
	RESOURCE_UPDATE_TYPE_DESCRIPTOR_SET,
	RESOURCE_UPDATE_TYPE_RENDER_PASS,
	RESOURCE_UPDATE_TYPE_SHADER_STATE,

	RESOURCE_UPDATE_TYPE_COUNT
};

enum MaterialFlag
{
	MATERIAL_FLAG_NONE = 0x00,
	MATERIAL_FLAG_ALPHA_MASK = 0x01,
	MATERIAL_FLAG_NO_TANGENTS = 0x02,
	MATERIAL_FLAG_NO_TEXTURE_COORDS = 0x04,
};

enum TextureFlag
{
	TEXTURE_FLAG_NONE = 0x00,
	TEXTURE_FLAG_RENDER_TARGET = 0x01,
	TEXTURE_FLAG_COMPUTE = 0x02,
	TEXTURE_FLAG_FORCE_GENERATE_MIPMAPS = 0x04,
};

enum KTXType
{
	KTX_TYPE_COMPRESSED = 0x0,
	KTX_TYPE_BYTE = 0x1400,
	KTX_TYPE_UNSIGNED_BYTE = 0x1401,
	KTX_TYPE_SHORT = 0x1402,
	KTX_TYPE_UNSIGNED_SHORT = 0x1403,
	KTX_TYPE_INT = 0x1404,
	KTX_TYPE_UNSIGNED_INT = 0x1405,
	KTX_TYPE_FLOAT = 0x1406,
	KTX_TYPE_DOUBLE = 0x140A,
	KTX_TYPE_HALF_FLOAT = 0x140B,
	KTX_TYPE_UNSIGNED_BYTE_3_3_2 = 0x8032,
	KTX_TYPE_UNSIGNED_SHORT_4_4_4_4 = 0x8033,
	KTX_TYPE_UNSIGNED_SHORT_5_5_5_1 = 0x8034,
	KTX_TYPE_UNSIGNED_INT_8_8_8_8 = 0x8035,
	KTX_TYPE_UNSIGNED_INT_10_10_10_2 = 0x8036,
	KTX_TYPE_UNSIGNED_BYTE_2_3_3_REV = 0x8362,
	KTX_TYPE_UNSIGNED_SHORT_5_6_5 = 0x8363,
	KTX_TYPE_UNSIGNED_SHORT_5_6_5_REV = 0x8364,
	KTX_TYPE_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365,
	KTX_TYPE_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366,
	KTX_TYPE_UNSIGNED_INT_8_8_8_8_REV = 0x8367,
	KTX_TYPE_UNSIGNED_INT_2_10_10_10_REV = 0x8368,
	KTX_TYPE_UNSIGNED_INT_24_8 = 0x84FA,
	KTX_TYPE_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E,
	KTX_TYPE_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,
	KTX_TYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD
};

enum KTXFormat
{
	KTX_FORMAT_RED = 0x1903,
	KTX_FORMAT_GREEN = 0x1904,
	KTX_FORMAT_BLUE = 0x1905,
	KTX_FORMAT_ALPHA = 0x1906,
	KTX_FORMAT_RGB = 0x1907,
	KTX_FORMAT_RGBA = 0x1908,
	KTX_FORMAT_LUMINANCE = 0x1909,
	KTX_FORMAT_LUMINANCE_ALPHA = 0x190A,
	KTX_FORMAT_ABGR = 0x8000,
	KTX_FORMAT_INTENSITY = 0x8049,
	KTX_FORMAT_BGR = 0x80E0,
	KTX_FORMAT_BGRA = 0x80E1,
	KTX_FORMAT_RG = 0x8227,
	KTX_FORMAT_RG_INTEGER = 0x8228,
	KTX_FORMAT_SRGB = 0x8C40,
	KTX_FORMAT_SRGB_ALPHA = 0x8C42,
	KTX_FORMAT_SLUMINANCE_ALPHA = 0x8C44,
	KTX_FORMAT_SLUMINANCE = 0x8C46,
	KTX_FORMAT_RED_INTEGER = 0x8D94,
	KTX_FORMAT_GREEN_INTEGER = 0x8D95,
	KTX_FORMAT_BLUE_INTEGER = 0x8D96,
	KTX_FORMAT_ALPHA_INTEGER = 0x8D97,
	KTX_FORMAT_RGB_INTEGER = 0x8D98,
	KTX_FORMAT_RGBA_INTEGER = 0x8D99,
	KTX_FORMAT_BGR_INTEGER = 0x8D9A,
	KTX_FORMAT_BGRA_INTEGER = 0x8D9B,
	KTX_FORMAT_RED_SNORM = 0x8F90,
	KTX_FORMAT_RG_SNORM = 0x8F91,
	KTX_FORMAT_RGB_SNORM = 0x8F92,
	KTX_FORMAT_RGBA_SNORM = 0x8F93,

	KTX_FORMAT_ALPHA4 = 0x803B,
	KTX_FORMAT_ALPHA8 = 0x803C,
	KTX_FORMAT_ALPHA12 = 0x803D,
	KTX_FORMAT_ALPHA16 = 0x803E,
	KTX_FORMAT_LUMINANCE4 = 0x803F,
	KTX_FORMAT_LUMINANCE8 = 0x8040,
	KTX_FORMAT_LUMINANCE12 = 0x8041,
	KTX_FORMAT_LUMINANCE16 = 0x8042,
	KTX_FORMAT_LUMINANCE4_ALPHA4 = 0x8043,
	KTX_FORMAT_LUMINANCE6_ALPHA2 = 0x8044,
	KTX_FORMAT_LUMINANCE8_ALPHA8 = 0x8045,
	KTX_FORMAT_LUMINANCE12_ALPHA4 = 0x8046,
	KTX_FORMAT_LUMINANCE12_ALPHA12 = 0x8047,
	KTX_FORMAT_LUMINANCE16_ALPHA16 = 0x8048,
	KTX_FORMAT_INTENSITY4 = 0x804A,
	KTX_FORMAT_INTENSITY8 = 0x804B,
	KTX_FORMAT_INTENSITY12 = 0x804C,
	KTX_FORMAT_INTENSITY16 = 0x804D,
	KTX_FORMAT_R3_G3_B2 = 0x2A10,
	KTX_FORMAT_RGB2 = 0x804E,
	KTX_FORMAT_RGB4 = 0x804F,
	KTX_FORMAT_RGB5 = 0x8050,
	KTX_FORMAT_RGB8 = 0x8051,
	KTX_FORMAT_RGB10 = 0x8052,
	KTX_FORMAT_RGB12 = 0x8053,
	KTX_FORMAT_RGB16 = 0x8054,
	KTX_FORMAT_RGBA2 = 0x8055,
	KTX_FORMAT_RGBA4 = 0x8056,
	KTX_FORMAT_RGB5_A1 = 0x8057,
	KTX_FORMAT_RGBA8 = 0x8058,
	KTX_FORMAT_RGB10_A2 = 0x8059,
	KTX_FORMAT_RGB10_A2UI = 0x906F,
	KTX_FORMAT_RGBA12 = 0x805A,
	KTX_FORMAT_RGBA16 = 0x805B,
	KTX_FORMAT_R8 = 0x8229,
	KTX_FORMAT_R16 = 0x822A,
	KTX_FORMAT_RG8 = 0x822B,
	KTX_FORMAT_RG16 = 0x822C,
	KTX_FORMAT_R16F = 0x822D,
	KTX_FORMAT_R32F = 0x822E,
	KTX_FORMAT_RG16F = 0x822F,
	KTX_FORMAT_RG32F = 0x8230,
	KTX_FORMAT_R8I = 0x8231,
	KTX_FORMAT_R8UI = 0x8232,
	KTX_FORMAT_R16I = 0x8233,
	KTX_FORMAT_R16UI = 0x8234,
	KTX_FORMAT_R32I = 0x8235,
	KTX_FORMAT_R32UI = 0x8236,
	KTX_FORMAT_RG8I = 0x8237,
	KTX_FORMAT_RG8UI = 0x8238,
	KTX_FORMAT_RG16I = 0x8239,
	KTX_FORMAT_RG16UI = 0x823A,
	KTX_FORMAT_RG32I = 0x823B,
	KTX_FORMAT_RG32UI = 0x823C,
	KTX_FORMAT_RGBA32F = 0x8814,
	KTX_FORMAT_RGB32F = 0x8815,
	KTX_FORMAT_RGBA16F = 0x881A,
	KTX_FORMAT_RGB16F = 0x881B,
	KTX_FORMAT_R11F_G11F_B10F = 0x8C3A,
	KTX_FORMAT_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,
	KTX_FORMAT_RGB9_E5 = 0x8C3D,
	KTX_FORMAT_SLUMINANCE8_ALPHA8 = 0x8C45,
	KTX_FORMAT_SLUMINANCE8 = 0x8C47,
	KTX_FORMAT_RGB565 = 0x8D62,
	KTX_FORMAT_RGBA32UI = 0x8D70,
	KTX_FORMAT_RGB32UI = 0x8D71,
	KTX_FORMAT_RGBA16UI = 0x8D76,
	KTX_FORMAT_RGB16UI = 0x8D77,
	KTX_FORMAT_RGBA8UI = 0x8D7C,
	KTX_FORMAT_RGB8UI = 0x8D7D,
	KTX_FORMAT_RGBA32I = 0x8D82,
	KTX_FORMAT_RGB32I = 0x8D83,
	KTX_FORMAT_RGBA16I = 0x8D88,
	KTX_FORMAT_RGB16I = 0x8D89,
	KTX_FORMAT_RGBA8I = 0x8D8E,
	KTX_FORMAT_RGB8I = 0x8D8F,
	KTX_FORMAT_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD,
	KTX_FORMAT_R8_SNORM = 0x8F94,
	KTX_FORMAT_RG8_SNORM = 0x8F95,
	KTX_FORMAT_RGB8_SNORM = 0x8F96,
	KTX_FORMAT_RGBA8_SNORM = 0x8F97,
	KTX_FORMAT_R16_SNORM = 0x8F98,
	KTX_FORMAT_RG16_SNORM = 0x8F99,
	KTX_FORMAT_RGB16_SNORM = 0x8F9A,
	KTX_FORMAT_RGBA16_SNORM = 0x8F9B,
	KTX_FORMAT_SR8 = 0x8FBD,
	KTX_FORMAT_SRG8 = 0x8FBE,
	KTX_FORMAT_SRGB8 = 0x8C41,
	KTX_FORMAT_SRGB8_ALPHA8 = 0x8C43,
	KTX_FORMAT_ALPHA8_SNORM = 0x9014,
	KTX_FORMAT_LUMINANCE8_SNORM = 0x9015,
	KTX_FORMAT_LUMINANCE8_ALPHA8_SNORM = 0x9016,
	KTX_FORMAT_INTENSITY8_SNORM = 0x9017,
	KTX_FORMAT_ALPHA16_SNORM = 0x9018,
	KTX_FORMAT_LUMINANCE16_SNORM = 0x9019,
	KTX_FORMAT_LUMINANCE16_ALPHA16_SNORM = 0x901A,
	KTX_FORMAT_INTENSITY16_SNORM = 0x901B,

	KTX_FORMAT_PALETTE4_RGB8_OES = 0x8B90,
	KTX_FORMAT_PALETTE4_RGBA8_OES = 0x8B91,
	KTX_FORMAT_PALETTE4_R5_G6_B5_OES = 0x8B92,
	KTX_FORMAT_PALETTE4_RGBA4_OES = 0x8B93,
	KTX_FORMAT_PALETTE4_RGB5_A1_OES = 0x8B94,
	KTX_FORMAT_PALETTE8_RGB8_OES = 0x8B95,
	KTX_FORMAT_PALETTE8_RGBA8_OES = 0x8B96,
	KTX_FORMAT_PALETTE8_R5_G6_B5_OES = 0x8B97,
	KTX_FORMAT_PALETTE8_RGBA4_OES = 0x8B98,
	KTX_FORMAT_PALETTE8_RGB5_A1_OES = 0x8B99
};

enum KTXCompression
{
	KTX_COMPRESSION_RGB_S3TC_DXT1 = 0x83F0,
	KTX_COMPRESSION_RGBA_S3TC_DXT1 = 0x83F1,
	KTX_COMPRESSION_RGBA_S3TC_DXT3 = 0x83F2,
	KTX_COMPRESSION_RGBA_S3TC_DXT5 = 0x83F3,
	KTX_COMPRESSION_3DC_X_AMD = 0x87F9,
	KTX_COMPRESSION_3DC_XY_AMD = 0x87FA,
	KTX_COMPRESSION_ATC_RGBA_INTERPOLATED_ALPHA = 0x87EE,
	KTX_COMPRESSION_SRGB_PVRTC_2BPPV1 = 0x8A54,
	KTX_COMPRESSION_SRGB_PVRTC_4BPPV1 = 0x8A55,
	KTX_COMPRESSION_SRGB_ALPHA_PVRTC_2BPPV1 = 0x8A56,
	KTX_COMPRESSION_SRGB_ALPHA_PVRTC_4BPPV1 = 0x8A57,
	KTX_COMPRESSION_RGB_PVRTC_4BPPV1 = 0x8C00,
	KTX_COMPRESSION_RGB_PVRTC_2BPPV1 = 0x8C01,
	KTX_COMPRESSION_RGBA_PVRTC_4BPPV1 = 0x8C02,
	KTX_COMPRESSION_RGBA_PVRTC_2BPPV1 = 0x8C03,
	KTX_COMPRESSION_SRGB_S3TC_DXT1 = 0x8C4C,
	KTX_COMPRESSION_SRGB_ALPHA_S3TC_DXT1 = 0x8C4D,
	KTX_COMPRESSION_SRGB_ALPHA_S3TC_DXT3 = 0x8C4E,
	KTX_COMPRESSION_SRGB_ALPHA_S3TC_DXT5 = 0x8C4F,
	KTX_COMPRESSION_LUMINANCE_LATC1 = 0x8C70,
	KTX_COMPRESSION_SIGNED_LUMINANCE_LATC1 = 0x8C71,
	KTX_COMPRESSION_LUMINANCE_ALPHA_LATC2 = 0x8C72,
	KTX_COMPRESSION_SIGNED_LUMINANCE_ALPHA_LATC2 = 0x8C73,
	KTX_COMPRESSION_ATC_RGB = 0x8C92,
	KTX_COMPRESSION_ATC_RGBA_EXPLICIT_ALPHA = 0x8C93,
	KTX_COMPRESSION_RED_RGTC1 = 0x8DBB,
	KTX_COMPRESSION_SIGNED_RED_RGTC1 = 0x8DBC,
	KTX_COMPRESSION_RED_GREEN_RGTC2 = 0x8DBD,
	KTX_COMPRESSION_SIGNED_RED_GREEN_RGTC2 = 0x8DBE,
	KTX_COMPRESSION_ETC1_RGB8_OES = 0x8D64,
	KTX_COMPRESSION_RGBA_BPTC_UNORM = 0x8E8C,
	KTX_COMPRESSION_SRGB_ALPHA_BPTC_UNORM = 0x8E8D,
	KTX_COMPRESSION_RGB_BPTC_SIGNED_FLOAT = 0x8E8E,
	KTX_COMPRESSION_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F,
	KTX_COMPRESSION_R11_EAC = 0x9270,
	KTX_COMPRESSION_SIGNED_R11_EAC = 0x9271,
	KTX_COMPRESSION_RG11_EAC = 0x9272,
	KTX_COMPRESSION_SIGNED_RG11_EAC = 0x9273,
	KTX_COMPRESSION_RGB8_ETC2 = 0x9274,
	KTX_COMPRESSION_SRGB8_ETC2 = 0x9275,
	KTX_COMPRESSION_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,
	KTX_COMPRESSION_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,
	KTX_COMPRESSION_RGBA8_ETC2_EAC = 0x9278,
	KTX_COMPRESSION_SRGB8_ALPHA8_ETC2_EAC = 0x9279,
	KTX_COMPRESSION_SRGB_ALPHA_PVRTC_2BPPV2 = 0x93F0,
	KTX_COMPRESSION_SRGB_ALPHA_PVRTC_4BPPV2 = 0x93F1,
	KTX_COMPRESSION_RGBA_ASTC_4x4 = 0x93B0,
	KTX_COMPRESSION_RGBA_ASTC_5x4 = 0x93B1,
	KTX_COMPRESSION_RGBA_ASTC_5x5 = 0x93B2,
	KTX_COMPRESSION_RGBA_ASTC_6x5 = 0x93B3,
	KTX_COMPRESSION_RGBA_ASTC_6x6 = 0x93B4,
	KTX_COMPRESSION_RGBA_ASTC_8x5 = 0x93B5,
	KTX_COMPRESSION_RGBA_ASTC_8x6 = 0x93B6,
	KTX_COMPRESSION_RGBA_ASTC_8x8 = 0x93B7,
	KTX_COMPRESSION_RGBA_ASTC_10x5 = 0x93B8,
	KTX_COMPRESSION_RGBA_ASTC_10x6 = 0x93B9,
	KTX_COMPRESSION_RGBA_ASTC_10x8 = 0x93BA,
	KTX_COMPRESSION_RGBA_ASTC_10x10 = 0x93BB,
	KTX_COMPRESSION_RGBA_ASTC_12x10 = 0x93BC,
	KTX_COMPRESSION_RGBA_ASTC_12x12 = 0x93BD,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_10x8 = 0x93DA,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_10x10 = 0x93DB,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_12x10 = 0x93DC,
	KTX_COMPRESSION_SRGB8_ALPHA8_ASTC_12x12 = 0x93DD
};

struct Sampler
{
	void Destroy() { name.Destroy(); }

	String					name{ NO_INIT };
	HashHandle				handle{ U64_MAX };

	VkFilter				minFilter{ VK_FILTER_NEAREST };
	VkFilter				magFilter{ VK_FILTER_NEAREST };
	VkSamplerMipmapMode		mipFilter{ VK_SAMPLER_MIPMAP_MODE_NEAREST };

	VkSamplerAddressMode	addressModeU{ VK_SAMPLER_ADDRESS_MODE_REPEAT };
	VkSamplerAddressMode	addressModeV{ VK_SAMPLER_ADDRESS_MODE_REPEAT };
	VkSamplerAddressMode	addressModeW{ VK_SAMPLER_ADDRESS_MODE_REPEAT };

	VkBorderColor			border{ VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE };

	VkSampler				sampler{ nullptr };
};

struct SamplerInfo
{
	void Destroy() { name.Destroy(); }

	SamplerInfo& SetMinMagMip(VkFilter min, VkFilter mag, VkSamplerMipmapMode mip);
	SamplerInfo& SetAddressModeU(VkSamplerAddressMode u);
	SamplerInfo& SetAddressModeUV(VkSamplerAddressMode u, VkSamplerAddressMode v);
	SamplerInfo& SetAddressModeUVW(VkSamplerAddressMode u, VkSamplerAddressMode v, VkSamplerAddressMode w);
	SamplerInfo& SetName(const String& name);

	VkFilter				minFilter{ VK_FILTER_NEAREST };
	VkFilter				magFilter{ VK_FILTER_NEAREST };
	VkSamplerMipmapMode		mipFilter{ VK_SAMPLER_MIPMAP_MODE_NEAREST };

	VkSamplerAddressMode	addressModeU{ VK_SAMPLER_ADDRESS_MODE_REPEAT };
	VkSamplerAddressMode	addressModeV{ VK_SAMPLER_ADDRESS_MODE_REPEAT };
	VkSamplerAddressMode	addressModeW{ VK_SAMPLER_ADDRESS_MODE_REPEAT };

	VkBorderColor			border{ VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE };

	VkSamplerReductionMode	reductionMode{ VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE };

	String					name{ NO_INIT };
};

struct Texture
{
	void Destroy() { name.Destroy(); }

	String				name{ NO_INIT };
	HashHandle			handle{ U64_MAX };

	U64					size{ 0 };
	U16					width{ 1 };
	U16					height{ 1 };
	U16					depth{ 1 };
	U32					flags{ 0 };

	VkImageType			type{ VK_IMAGE_TYPE_2D };

	VkImage				image{ nullptr };
	VkImageView			imageView{ nullptr };
	VkFormat			format{ VK_FORMAT_UNDEFINED };
	VkImageLayout		imageLayout{ VK_IMAGE_LAYOUT_UNDEFINED };
	VmaAllocation_T* allocation{ nullptr };

	VkImageView			mipmaps[MAX_MIPMAP_COUNT]{ nullptr };
	U8					mipmapCount{ 1 };

	Sampler* sampler{ nullptr };

	bool				swapchainImage{ false };
	bool				mipmapsGenerated{ false };
};

struct TextureInfo
{
	void Destroy() { name.Destroy(); }

	TextureInfo& SetSize(U16 width, U16 height, U16 depth);
	TextureInfo& SetFormatType(VkFormat format, VkImageType type);
	TextureInfo& SetName(const String& name);
	TextureInfo& SetData(void* data);

	void* initialData{ nullptr };
	U16					width{ 1 };
	U16					height{ 1 };
	U16					depth{ 1 };
	U32					flags{ 0 };
	U8					mipmapCount{ 1 };

	VkFormat			format{ VK_FORMAT_UNDEFINED };
	VkImageType			type{ VK_IMAGE_TYPE_2D };

	String				name{ NO_INIT };
};

struct Buffer
{
	VkBufferUsageFlags		usage{ 0 };
	VkMemoryPropertyFlags	memoryProperties{ 0 };

	VkBuffer				vkBuffer{ nullptr };
	VkDeviceMemory			deviceMemory{ nullptr };
	VmaAllocation_T* allocation{ nullptr };
	U64						size{ 0 };
	U64						allocationOffset{ 0 };

	void* data{ nullptr };
	bool mapped{ false };
};

struct RenderpassOutput
{
	RenderpassOutput& Reset();
	RenderpassOutput& Color(VkFormat format);
	RenderpassOutput& Depth(VkFormat format);
	RenderpassOutput& SetOperations(VkAttachmentLoadOp color, VkAttachmentLoadOp depth, VkAttachmentLoadOp stencil);

	VkFormat			colorFormats[MAX_IMAGE_OUTPUTS]{ VK_FORMAT_UNDEFINED };
	VkFormat			depthStencilFormat{ VK_FORMAT_UNDEFINED };
	U32					colorFormatCount{ 0 };

	VkAttachmentLoadOp	colorOperation{ VK_ATTACHMENT_LOAD_OP_DONT_CARE };
	VkAttachmentLoadOp	depthOperation{ VK_ATTACHMENT_LOAD_OP_DONT_CARE };
	VkAttachmentLoadOp	stencilOperation{ VK_ATTACHMENT_LOAD_OP_DONT_CARE };
	VkImageLayout		attachmentFinalLayout{ VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL };
};

struct Renderpass
{
	void Destroy() { name.Destroy(); }

	void Resize();

	String				name{ NO_INIT };
	HashHandle			handle;

	VkRenderPass		renderpass{ nullptr };
	VkFramebuffer		frameBuffers[MAX_IMAGE_OUTPUTS]{ nullptr };
	bool				tiedToFrame{ false };

	Texture* outputTextures[MAX_IMAGE_OUTPUTS]{ nullptr };
	Texture* outputDepth{ nullptr };
	VkClearValue		clears[MAX_IMAGE_OUTPUTS + 1]{};
	U8					clearCount{ 0 };
	Viewport			viewport{};

	RenderpassOutput	output{};

	U16					width{ 0 };
	U16					height{ 0 };
	U8					renderTargetCount{ 0 };

	U32					lastResize{ 0 };
};

struct RenderpassInfo
{
	void Destroy() { name.Destroy(); }

	RenderpassInfo& Reset();
	RenderpassInfo& AddRenderTarget(Texture* texture);
	RenderpassInfo& SetDepthStencilTexture(Texture* texture);
	RenderpassInfo& SetName(const String& name);
	RenderpassInfo& SetOperations(VkAttachmentLoadOp color, VkAttachmentLoadOp depth, VkAttachmentLoadOp stencil);
	RenderpassInfo& AddClearColor(const Vector4& color);
	RenderpassInfo& AddClearDepth(F32 depth);

	U16					width{ 0 };
	U16					height{ 0 };
	U8					renderTargetCount{ 0 };

	VkClearValue		clears[MAX_IMAGE_OUTPUTS + 1]{};
	U8					clearCount{ 0 };

	Texture* outputTextures[MAX_IMAGE_OUTPUTS]{ nullptr };
	Texture* depthStencilTexture{ nullptr };

	VkAttachmentLoadOp	colorOperation{ VK_ATTACHMENT_LOAD_OP_DONT_CARE };
	VkAttachmentLoadOp	depthOperation{ VK_ATTACHMENT_LOAD_OP_DONT_CARE };
	VkAttachmentLoadOp	stencilOperation{ VK_ATTACHMENT_LOAD_OP_DONT_CARE };
	VkImageLayout		attachmentFinalLayout{ VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL };

	String				name{ NO_INIT };
};

struct CommandBuffer;
struct Mesh;
struct Pipeline;

struct PostProcessData
{
	F32 contrast = 1.0f;
	F32 brightness = 0.0f;
	F32 saturation = 1.0f;
	F32 gammaCorrection = 1.0f;
	Vector4 directionalLight;
	Vector4 directionalLightColor;
	Vector4 ambientLight;
	F32		lightIntensity;
	U32		skyboxIndex{ U16_MAX };
};

struct GlobalData
{
	Matrix4 vp;
	Vector4 eye;
};

struct Vertex
{
	Vector3 position;
	Vector3 normal;
	Vector3 tangent;
	Vector3 bitangent;
	Vector2 texcoord;
};

struct Mesh
{
	Matrix4		model{ Matrix4::Identity };

	U16			diffuseTextureIndex{ U16_MAX };
	U16			metalRoughOcclTextureIndex{ U16_MAX };
	U16			normalTextureIndex{ U16_MAX };
	U16			emissivityTextureIndex{ U16_MAX };

	Vector4		baseColorFactor{ Vector4::One };
	Vector2		metalRoughFactor{ Vector2::One };
	Vector3		emissiveFactor{ Vector3::Zero };

	F32			alphaCutoff{ 0.0f };
	U32			flags{ MATERIAL_FLAG_NONE };
};

struct Model
{
	void Destroy() { name.Destroy(); }

	String		name{ NO_INIT };
	HashHandle	handle;

	Mesh meshes[32]{ };
	U32 meshCount{ 0 };
};

struct Skybox
{
	void Destroy() { name.Destroy(); }

	String name{ NO_INIT };
	HashHandle	handle;

	Buffer* buffer{ nullptr };

	Texture* texture{ nullptr };
};

struct NH_API Transform
{
	Vector3 position;
	Vector3 scale;
	Quaternion3 rotation;

	void CalculateMatrix(Matrix4& matrix)
	{
		matrix.Set(position, rotation, scale);
	}
};

struct ResourceUpdate
{
	ResourceUpdateType	type;
	HashHandle			handle;
	U32					currentFrame;
};

struct DescriptorSetUpdate
{
	DescriptorSet* descriptorSet;
	U32				frameIssued{ 0 };
};